#!/usr/bin/perl

#------------------------------------------------------------------------------
# create_nagiosconfig
#
# 	retrieve info from mimer http server and check for given radio devices
#       and users connected to the system and generate a basic set of nagios 
#       config.
# 
#      -- David 'fenrus' Syk, 2013-12-12
# 
# -----------------------------------------------------------------------------

use strict;
use Getopt::Std;
use LWP::UserAgent;

use Data::Dumper;

my $plugin_name = 'check_nagiosconfig';
my $version		= '0.03';
my $datestring = localtime();

my @radios;
my @users;

# getopt module config
$Getopt::Std::STANDARD_HELP_VERSION = 1;

# parse cmd opts
my %opts;
getopts('vH:P:d', \%opts);

# set default values for timeout,port and hostname
$opts{t} = 60 unless (defined $opts{t});
$opts{P} = 8080 unless (defined $opts{P});
$opts{H} = "127.0.0.1" unless (defined $opts{H});

my $radiolist;

if ( defined $opts{H} and not defined $opts{v}) {
	
	# get information from the infoserver
	getinforadio();
	getinfousers();

	print "# configuration is genrated at ".$datestring."\n";	
	print "#\n";
	print "\n# Define the checkcommands that is required by the generated config goes here\n";
	print "define command {\n	command_name 	check_mimer_infoserver\n	command_line	/usr/lib/nagios/plugins/check_mimer_infoserver -H \$HOSTADDRESS\$ -r \$ARG1\$ \n}\n";
	print "define command {\n	command_name 	check_mimer_infoserver_radio\n	command_line	/usr/lib/nagios/plugins/check_mimer_infoserver -H 127.0.0.1 -r \$ARG1\$ \n}\n";
	print "define command {\n	command_name 	check_mimer_user\n	command_line	/usr/lib/nagios/plugins/check_mimer_infoserver -H \$HOSTADDRESS\$ -u \$ARG1\$ \n}\n";
	print "define command {\n	command_name 	check_mimer_useronradio\n	command_line	/usr/lib/nagios/plugins/check_mimer_infoserver -H \$HOSTADDRESS\$ -u \$ARG1\$ -r \$ARG2\$ \n}\n";

	print "\n# Define hosts that always should exist\n";
	print "define host {\n	use		generic-host\n	host_name	infoserver\n	alias		infoserver\n	address		127.0.0.1\n	parents		switch\n}\n";
	print "define host {\n	use		generic-host\n	host_name	switch\n	alias		switch\n	address		127.0.0.1\n}\n";

	print "\n# Define a hostgroup that contains all hosts\n";
	print "define hostgroup {\n	hostgroup_name  all\n	alias           All hosts\n	members         *\n}\n";

	print "\n# Define service-checks for infoserver\n";
	print "define service {\n	use			generic-service\n	host_name		infoserver\n 	service_description	SYSTEM-Diskspace\n	check_command		check_all_disks!20%!10%\n}\n";
	print "define service {\n	use			generic-service\n	host_name		infoserver\n	service_description	SYSTEM-Load\n	check_command		check_load!5.0!4.0!3.0!10.0!6.0!4.0\n}\n";
	print "define service {\n	use			generic-service\n	hostgroup_name		all\n	service_description	Ping\n	check_command		check_ping!200.0,20%!500.0,60%\n}\n";


	print "\n# Define radio-devices currently visible in infoserver \n";
	foreach (@radios) {
		my $radionumber = (split ';',$_)[0];
		my $ip = (split ';',$_)[1];
		my $alias = (split ';',$_)[2];
	
		$radiolist = $radiolist. "radio-" .$radionumber.",";
	 	
		print "define host {\n";
		print "	use			generic-host\n";
		print "	host_name		radio-".$radionumber."\n";
		print "	alias			".$alias."\n";
		print "	address			".$ip."\n";
		print "	parents			switch\n";
		print "}\n";
	 } 

	# $radiolist will always contain one , too much at the end. we chop to remove it.
	chop($radiolist);

	print "\n# Define a hostgroup for all the radio-devices:\n";
	print "define hostgroup {\n";
	print "	hostgroup_name	mimer-devices\n";
	print "	alias 		mimer devices\n";
	print "	members		".$radiolist."\n";
	print "}\n";
	
	print "\n# Define a hostextinfo to get icons visible in webgui\n";
	print "define hostextinfo {\n	hostgroup_name	mimer-devices\n	notes		Mimerdevice\n	icon_image	base/mimer_radio.png\n	icon_image_alt	Mimerdevice\n	vrml_image	base/mimer_radio.png\n	statusmap_image	base/mimer_radio.png\n}\n";

	print "\n# Define a hostextinfo to get icons on switch in webgui\n";
	print "define hostextinfo {\n	host_name	switch\n	notes		switch\n	icon_image	base/switch40.png\n	icon_image_alt	switch\n	vrml_image	base/switch40.png\n	statusmap_image	base/switch40.png\n}\n";

	print "\n# Define service checks for specific radios towards infoserver presented on device\n";
	foreach (@radios) {
		my $radionumber = (split ';',$_)[0];
		my $alias = (split ';',$_)[1];
	
		$radiolist = $radiolist. "radio-" .$radionumber.",";
	 	
		print "define service {\n";
		print "	use			generic-service\n";
		print "	host_name		radio-".$radionumber."\n";
		print "	service_description	radio\n";
		print "	check_command		check_mimer_infoserver_radio!".$radionumber."\n";
		print "	notification_interval	0\n";
		print "}\n";
	 } 


}


print "\n";
exit 0;

sub getinforadio {
	my $ua = LWP::UserAgent->new;
	$ua->timeout($opts{t});
	# retrieve url
	my $response = $ua->get("http://". $opts{H} .":". $opts{P} ."/Radios");
	if (not $response->is_success) {
		print "ERROR: CANNOT RETRIEVE URL: ", $response->status_line, "\n";
		exit 1;
	} 
	else {
		my $content = $response->content;
		#debugging prints the recieved content
		if (defined $opts{d}) { print "\n\nDEBUG: Recieved content in getinforadio START\n".$content."DEBUG: Recieved content in getinforadio END\n\n"; }
	
		for (split /\n/, $content) {
			# match all raido lines
			if ($_ =~ m/^[0-9]/gsm) {
				my $row = $_;
	
				# clean row from newlines and stuffs
				$row =~ s/\R//g;
	
				push (@radios, $row);
				
				#if -l is requested, print the data
				if (defined $opts{l}) { print "radio ".$row."\n"; }
			}
		}
	}
}

sub getinfousers {
	my $ua = LWP::UserAgent->new;
	$ua->timeout($opts{t});
	my $response = $ua->get("http://". $opts{H} .":". $opts{P} ."/Users");
	if (not $response->is_success) {
		print "ERROR: CANNOT RETRIEVE URL: ", $response->status_line, "\n";
		exit 1;
	} 
	else {
		my $content = $response->content;
		#debugging prints the recieved content
		if (defined $opts{d}) { print "\n\nDEBUG: Recieved content in getinfousers START\n".$content."DEBUG: Recieved content in getinfouesrs END\n\n"; }
		
		for (split /\n/, $content) {
			# match all users lines
			if ($_ =~ m/^[0-9]/gsm) {
				my $row = $_;
				
				# clean row from newlines and stuffs
				$row =~ s/\R//g;

				# Put the data into an array
				push (@users, $row);
				
				#if -l is requested, print the data
				if (defined $opts{l}) { print "user ".$row."\n"; }
			}
		}
	}
}

sub HELP_MESSAGE {
	print <<EOHELP
	
	Retrieve data from mimer infoserver and create a basic configuration
	for nagios to use.
	
	--help      shows this message
	--version   shows version information

	-H <hostname> IP or hostname of the mimer server, this will default
	to 127.0.0.1 if not specified.	
EOHELP

;
}


sub VERSION_MESSAGE {
	print <<EOVM
$plugin_name v. $version


EOVM

;
}

